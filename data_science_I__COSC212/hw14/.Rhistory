shiny::runApp()
quakes
head(quakes)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
library(gdata)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
library(gdata)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
library(gdata)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
library(RCurl)
library(RJSONIO)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
results
library(RCurl)
library(RJSONIO)
quakeURL <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson"
apiResult <- getURL(quakeURL)
results <- fromJSON(apiResult)
length(results)
N <- 1e4  # total number of rows to preallocate--possibly an overestimate
DF <- data.frame(num=rep(NA, N), txt=rep("", N),  # as many cols as you need
stringsAsFactors=FALSE)          # you don't know levels yet
quakes
head(quakes)
df <- NULL
rbind(df, c("lat","long","depth","mag"))
df
df <- c("lat","long","depth","mag")
rbind(df, c(20,20,222,4.2))
df
df <- c("lat","long","depth","mag")
df <- rbind(df, c(20,20,222,4.2))
df
library(RCurl)
library(RJSONIO)
library(jsonlite)
url.LastHr <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
url.LastDay <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_day.geojson"
url.lastMn <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.geojson"
url.lastWk <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson"
url <- url.lastMn
quakeData <- jsonlite:: fromJSON(url, flatten = TRUE)
size <- dim(quakeData$features)[1]
quakeRecord = data.frame()
for (i in rep(1:size)) {
tempCoords <- quakeData$features$geometry.coordinates[[i]]
record <- data.frame(tempCoords [2] , tempCoords[1], tempCoords[3], quakeData$features$properties.mag[i])
quakeRecord <- rbind(quakeRecord, record)
print(record) }
colnames(quakeRecord) <- c("lat", "long", "depth", "mag")
print(size)
print(quakeRecord)
quakes <- quakeRecord
library(RCurl)
library(RJSONIO)
library(jsonlite)
url.LastHr <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
url.LastDay <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_day.geojson"
url.lastMn <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.geojson"
url.lastWk <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson"
url <- url.lastMn
quakeData <- jsonlite:: fromJSON(url, flatten = TRUE)
size <- dim(quakeData$features)[1]
quakeRecord = data.frame()
for (i in rep(1:size)) {
tempCoords <- quakeData$features$geometry.coordinates[[i]]
record <- data.frame(tempCoords [2] , tempCoords[1], tempCoords[3], quakeData$features$properties.mag[i])
quakeRecord <- rbind(quakeRecord, record)
print(record) }
colnames(quakeRecord) <- c("lat", "long", "depth", "mag")
print(size)
print(quakeRecord)
head(quakeRecord)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
e
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
setUrl <- function(set){
if(set == "Past Hour")
{
return(url.LastHr)
}
if(set == "Past Day")
{
return(url.LastDay)
}
if(set == "Past Week")
{
return(url.lastWk)
}
return(url.lastMn)
}
runApp()
runApp()
runApp()
runApp()
runApp('LiggettKloza_DS212Hw1314.R')
runApp('LiggettKloza_DS212Hw1314.R')
