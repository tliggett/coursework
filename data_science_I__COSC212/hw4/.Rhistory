vgam
install.packages("vgam")
install.packages("VGAM")
library('VGAM')
in.Range <- function(vect, min, max)
{
inRange <- 0
for(num in vect)
{
if(num > min && num < max) inRange++
}
}
in.Range <- function(vect, min, max)
{
inRange <- 0
for(num in vect)
{
if(num > min && num < max){ inRange++ }
}
}
in.Range <- function(vect, min, max)
{
inRange <- 0
for(num in vect)
{
if(num > min && num < max){
inRange++
}
}
return (inRange)
}
in.Range <- function(vect, min, max)
{
inRange <- 0
for(num in vect)
{
if(num > min && num < max){
inRange++
}
}
return (inRange)
}
in.Range <- function(vect, min, max)
{
inRange <- 0
return (inRange)
}
in.Range <- function(vect, min, max)
{
inRange <- 0
return (inRange)
}
test <- inRange(1,2,3)
in.Range <- function(vect, min, max)
{
inRange <- 0
return (inRange)
}
test <- in.Range(1,2,3)
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
print(hello)
}
return (inRange)
}
test <- in.Range(c(1,2,3,4,5),2,3)
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
print('hello')
}
return (inRange)
}
test <- in.Range(c(1,2,3,4,5),2,3)
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
if (vect[i] >= min && vect[i] <= max)
{ inRange = inRange + 1
}
}
return (inRange)
}
test <- in.Range(c(1,2,3,4,5),2,3)
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
if (vect[i] >= min && vect[i] <= max)
{ inRange = inRange + 1
}
}
return (inRange)
}
test <- in.Range(c(1,2,3,4,5),2,3)
print(test)
distro <- rnorm(1000, 80)
distro <- rnorm(1000, 80)
# 2. 	Write a function that takes three variables – a vector, a min and a max – and returns the number of elements in the vector that are between the min and max (including the min and max).
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
if (vect[i] >= min && vect[i] <= max)
{ inRange = inRange + 1
}
}
return (inRange)
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
print('There are ', range, 'within the range of 79 to 81')
print('There are ' + range + 'within the range of 79 to 81')
in.Range <- function(vect, min, max)
{
inRange <- 0
for(i in 1:length(vect)){
if (vect[i] >= min && vect[i] <= max)
{ inRange = inRange + 1
}
}
return (inRange)
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
print(range)
for(i in 1:3)
{
print(in.Range(rnorm(1000, 80), 79, 81))
}
for(i in 1:3)
{
print(in.Range(rnorm(1000, 80), 79, 81))
}
for(i in 1:3)
{
print(in.Range(rnorm(1000, 80), 79, 81))
}
?rpareto
FSApops <- rpareto(51,1, 1)
hist(FSApops)
?rpareto
FSApops <- rpareto(51,20,40000000)
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,40000000,20)
hist(FSApops)
FSApops <- rpareto(51,40000000,20)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,5000000,4)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,40000000,8)
FSApops
hist(FSApops)
FSApops <- rpareto(51,40000000,8)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,5000000,8)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,5000000,30)
FSApops
FSApops <- rpareto(51,5000000,30)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,30)
FSApops
hist(FSApops)
FSApops <- rpareto(51,5000000,2)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,2)
FSApops
hist(FSApops)
FSApops <- rpareto(51,550000,2)
FSApops
hist(FSApops)
FSApops <- rpareto(51,500000,2)
FSApops
hist(FSApops)
FSApops <- rpareto(51,500000,2)
FSApops
hist(FSApops)
FSApops <- rpareto(51,500000,1)
FSApops
hist(FSApops)
FSApops <- rpareto(51,500000,0.5)
FSApops
hist(FSApops)
FSApops <- rpareto(51,500000,0.75)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,500000,1)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,0.9)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,0.9)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,0.9)
FSApops
hist(FSApops)
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,577000,0.95)
FSApops
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
FSApops
hist(FSApops, breaks = 20)
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
mean(FSApops)
sd(FSApops)
min(FSApops)
max(FSApops)
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
mean(FSApops)
sd(FSApops)
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
min(FSApops)
max(FSApops)
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
mean(FSApops)
sd(FSApops)
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
min(FSApops)
max(FSApops)
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
mean(FSApops)
sd(FSApops)
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
min(FSApops)
max(FSApops)
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
mean(FSApops)
sd(FSApops)
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
min(FSApops)
max(FSApops)
replicate(3, in.Range(rnorm(1000, 80), 79, 81))
myFunc <- function(vect, min, max)
{}
myFunc <- function(vect, min, max)
{}
test <- c(1, 2, 3, 4)
test <- test[test > 2 && test < 4]
test
test <- c(1,2,3,4)
test
test <- test[test > 2]
test
in.Range <- function(vect, min, max)
{
forRet <- vect[vect >= min]
forRet <- forRet[forRet <= max]
return(length(forRet))
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
print(range)
install.packages('VGAM')
library('VGAM')
require('VGAM')
inRange <- vect[vect >= min]
inRange <- vect[vect <= max]
return(length(inRange))
# Task 1: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate a normal distribution, of 1,000 samples, with a mean of 80.
distro <- rnorm(1000, 80)
# 2. 	Write a function that takes three variables – a vector, a min and a max – and returns the number of elements in the vector that are between the min and max (including the min and max).
in.Range <- function(vect, min, max)
{
forRet <- vect[vect >= min]
forRet <- forRet[forRet <= max]
return(length(forRet))
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
print(range)
range <- in.Range(distro, 79, 81)
cat("There were", range, "within the range 79 - 81")
install.packages('VGAM')
library('VGAM')
require('VGAM')
inRange <- vect[vect >= min]
inRange <- vect[vect <= max]
return(length(inRange))
# Task 1: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate a normal distribution, of 1,000 samples, with a mean of 80.
distro <- rnorm(1000, 80)
# 2. 	Write a function that takes three variables – a vector, a min and a max – and returns the number of elements in the vector that are between the min and max (including the min and max).
in.Range <- function(vect, min, max)
{
forRet <- vect[vect >= min]
forRet <- forRet[forRet <= max]
return(length(forRet))
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
cat("There were", range, "within the range 79 - 81")
# 4. 	Repeat 3 times (creating a normal distribution and then calling your function) to see if the results vary.
replicate(3, in.Range(rnorm(1000, 80), 79, 81))
# The results varied a bit, as to be expected with random data.
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
cat("FSApops mean: ",mean(FSApops))
cat("FSApops standard deviation: ", sd(FSApops))
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
cat("FSApops max: ", max(FSApops) ," | min: ",min(FSApops))
inRange <- vect[vect >= min]
inRange <- vect[vect <= max]
return(length(inRange))
# Task 1: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate a normal distribution, of 1,000 samples, with a mean of 80.
distro <- rnorm(1000, 80)
# 2. 	Write a function that takes three variables – a vector, a min and a max – and returns the number of elements in the vector that are between the min and max (including the min and max).
in.Range <- function(vect, min, max)
{
forRet <- vect[vect >= min]
forRet <- forRet[forRet <= max]
return(length(forRet))
}
# 3. 	Use the function to see how many of your normal distribution samples are within the range of 79 to 81.
range <- in.Range(distro, 79, 81)
cat("There were", range, "within the range 79 - 81")
# 4. 	Repeat 3 times (creating a normal distribution and then calling your function) to see if the results vary.
replicate(3, in.Range(rnorm(1000, 80), 79, 81))
# The results varied a bit, as to be expected with random data.
# Task 2: Write, test, and submit the necessary code in R to accomplish the following:
# 1. 	Generate 51 random numbers in a Pareto distribution and assign them to a variable called “FSApops.”
FSApops <- rpareto(51,577000,1.05)
# 2. 	Specify a “location” and a “shape” for your Pareto distribution that makes it as similar as possible to the actual distribution of state populations on page 89 of the textbook.
# 3. 	Create a histogram that shows the distribution of values in FSApops.
hist(FSApops, breaks = 20)
# 4. 	Use a command to report the actual mean and standard deviation of the 51 values stored in FSApops.
cat("FSApops mean: ",mean(FSApops))
cat("FSApops standard deviation: ", sd(FSApops))
# 5. 	Use a command to report the population of your largest fictional state (i.e., your California) and your smallest fictional state (i.e., your Wyoming).
cat("FSApops max: ", max(FSApops) ," | min: ",min(FSApops))
hist(FSApops, breaks = 20)
?rpareto
